created: 20220621033716114
creator: Lconfident
modified: 20220621040935609
modifier: Lconfident
tags: 关键字
title: static
type: text/vnd.tiddlywiki

1. 静态变量

* 静态变量：又叫做类变量，也就是说这个变量使属于类的，类所有实例都共享静态变量，可以直接通过类名来访问它，静态变量在内存中只存在一份。
* 实例变量：每创建一个实例就会产生一个实例变量，它与该实例同生共死。

```java
	public class A {
		private int x;					// 实例变量
		private static int y; 		// 静态变量
		public static void main(String[] args) {
// 		int x = A.x; 
/** 	Non-static field 'x' cannot be referenced 
 		from a static context	*/
		A a = new A();
		int x = a.x;
		int y = A.y;
		}
}
```

2. 静态方法

静态方法在类加载的时候就存在了，它不依赖与任何实例。

* 所以静态方法必须有实现，也就是说它不能有抽象方法。
---
* 只能访问所属类的静态字段和静态方法，方法中不能有 this 和 super 关键字，因为这两个关键字与具体对象关联。

3. 静态语句块

静态语句块在类初始化时运行一次

```java
public class A {
		static {
			System.out.println("123");
		}
		public static void main(String[] args) {
			A a1 = new A();	
			A	a2 = new A();
		}
}
```
```
123
```
4.静态内部类

非静态内部类依赖于外部类的实例，也就是说需要先创建外部实例，才能用这个实例创建非静态内部类，而静态内部类不需要

```java
public class OuterClass {
		class InnerClass {
	}
		static class StaticInnerClass {
	}
		public static void main(String[] args) {
// InnerClass innerClass = new InnerClass();
// 'OuterClass.this' cannot be referenced from a static context
		OuterClass outerClass = new OuterClass();
		InnerClass innerClass = outerClass.new InnerClass();
		StaticInnerClass staticInnerClass = new StaticInnerClass();
	}
}
```

''静态内部类不能访问外部类的非静态的变量和方法。''

5.静态导包

使用静态导包不用指明类名，从而简化代码，但使可读性降低

```
导入语法：
import static 包名.类名.静态成员变量;
import static 包名.类名.静态成员方法;
import static 包名.类名.*;
```

6.初始化顺序

''静态变量''和''静态语句块''优先于''实例变量''和''普通语句块''

静态变量和静态语句块的''初始化顺序''取决于它们在代码中的顺序

```java
	public static String staticField = "静态变量";
	static {
		System.out.println("静态语句块");
	}
	public String field = "实例变量";
	{
		System.out.println("普通语句块");
	}
//	最后才是构造函数的初始化
	public InitialOrderTest() {
		System.out.println("构造函数");
	}
```

存在继承的情况下，初始化顺序为：

父类（静态变量、静态语句块）

子类（静态变量、静态语句块）

父类（实例变量、普通语句块）

父类（构造函数）

子类（实例变量、普通语句块）

子类（构造函数）

