created: 20220626012421688
creator: Lconfident
modified: 20220628102810908
modifier: Lconfident
tags: 源码分析
title: Vector
type: text/vnd.tiddlywiki

!!同步

它的实现与 ArrayList 类似，但是使用了 synchronized 进行同步。

!!扩容

Vector 的构造函数可以传入capacityIncrement 参数，它的作用是在扩容时使容量 capacity 增长capacityIncrement。

如果这个参数的值小于等于 0，扩容时每次都令 capacity 为原来的两倍。

调用没有 capacityIncrement 的构造函数时，capacityIncrement 值被设置为 0，也就是说默认情况下Vector 每次扩容时容量都会翻倍。

!!与AarrayList的比较

* Vector 是同步的，因此开销就比 ArrayList 要大，访问速度更慢。最好使用 ArrayList 而不是Vector，因为同步操作完全可以由程序员自己来控制；
* Vector 每次扩容请求其大小的 2 倍（也可以通过构造函数设置增长的容量），而 ArrayList 是 1.5倍。

!!替代方案

可以使用Collections.synchronizedList(); 得到一个线程安全的 ArrayList。

```java
List<String> list = new ArrayList<>();
List<String> synList = Collections.synchronizedList(list);
```

也可以使用 concurrent 并发包下的 CopyOnWriteArrayList 类。

```
List<String> list = new CopyOnWriteArrayList<>();
```