created: 20220626022058788
creator: Lconfident
modified: 20220628101228932
modifier: Lconfident
tags: 源码分析
title: ConcurrentHashMap
type: text/vnd.tiddlywiki

!!存储结构

ConcurrentHashMap 和 HashMap 实现上类似，最主要的差别是ConcurrentHashMap 采用了分段锁（Segment），每个分段锁维护着几个桶（HashEntry），多个线程可以同时访问不同分段锁上的桶，从而使其并发度更高（并发度就是 Segment 的个数）。默认的并发级别为 16，也就是说默认创建 16 个 Segment。

!! size 操作

每个 Segment 维护了一个 count 变量来统计该 Segment 中的键值对个数

在执行 size 操作时，需要遍历所有 Segment 然后把 count 累计起来。

ConcurrentHashMap 在执行 size 操作时先尝试不加锁，如果连续两次不加锁操作得到的结果一致，那么可以认为这个结果是正确的。

尝试次数使用 RETRIES_BEFORE_LOCK 定义，该值为 2，retries 初始值为 -1，因此尝试次数为 3。

如果尝试的次数超过 3 次，就需要对每个 Segment 加锁。

JDK 1.8 使用了 CAS 操作来支持更高的并发度，在 CAS 操作失败时使用内置锁 synchronized。并且 JDK 1.8 的实现也在链表过长时会转换为红黑树。