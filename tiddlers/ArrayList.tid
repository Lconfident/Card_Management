created: 20220626011235453
creator: Lconfident
modified: 20220626012412989
modifier: Lconfident
tags: 源码分析 JAVA
title: ArrayList
type: text/vnd.tiddlywiki

!!概览


* ArrayList是基于数组实现的，所以支持快速随机访问

```java
public class ArrayList<E> extends AbstractList<E>
		implements List<E>, RandomAccess, Cloneable, java.io.Serializable
```
> RandomAccess 接口标识着该类支持快速随机访问。

* 数组的默认大小为 10。

!! 扩容

添加元素时使用ensureCapacityInternal() 方法来保证容量足够，

如果不够时，需要使用 grow() 方法进行扩容，

新容量的大小为oldCapacity +(oldCapacity >> 1) ，

即oldCapacity+oldCapacity/2。
其中 oldCapacity >> 1 需要取整，所以新容量大约是旧容量的 1.5 倍左右（oldCapacity 为偶数就是
1.5 倍，为奇数就是 1.5 倍-0.5）

扩容操作需要调用 Arrays.copyOf() 把原数组整个复制到新数组中，这个操作代价高，

因此最好在创建 ArrayList 对象时就指定大概的容量大小，减少扩容操作的次数。

!!删除元素

需要调用 System.arraycopy() 将 index+1 后面的元素都复制到 index 位置上，该操作的时间复杂度为O(N)，可以看到 ArrayList 删除元素的代价是非常高的。

!! 序列化

ArrayList 基于数组实现，并且具有动态扩容特性，因此保存元素的数组不一定都会被使用，那么就没必要全部进行序列化。

保存元素的数组 elementData 使用transient 修饰，该关键字声明数组默认不会被序列化。

`transient Object[] elementData; // non-private to simplify nested class access`

ArrayList 实现了 writeObject() 和 readObject() 来控制只序列化数组中有元素填充那部分内容。

序列化时需要使用 ObjectOutputStream 的 writeObject() 将对象转换为字节流并输出。而writeObject() 方法在传入的对象存在 writeObject() 的时候会去反射调用该对象的 writeObject() 来实现序列化。反序列化使用的是 ObjectInputStream 的 readObject() 方法，原理类似。

```java
ArrayList list = new ArrayList();
ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file));
oos.writeObject(list);
```

!! Fail-Fast

modCount 用来记录 ArrayList 结构发生变化的次数。结构发生变化是指添加或者删除至少一个元素的所有操作，或者是调整内部数组的大小，仅仅只是设置元素的值不算结构发生变化。

在进行序列化或者迭代等操作时，需要比较操作前后 modCount 是否改变，如果改变了需要抛出ConcurrentModificationException。代码参考上节序列化中的 writeObject() 方法。